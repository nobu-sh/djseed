"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7910],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),c=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,m=p["".concat(a,".").concat(g)]||p[g]||d[g]||l;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=p;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1504:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const l={title:"Sharding",sidebar_position:1},i=void 0,s={unversionedId:"examples/sharding",id:"examples/sharding",title:"Sharding",description:"In this example we will go over how to prepare you bot for sharding.",source:"@site/docs/examples/sharding.mdx",sourceDirName:"examples",slug:"/examples/sharding",permalink:"/djseed/docs/examples/sharding",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Sharding",sidebar_position:1},sidebar:"sidebar",previous:{title:"Reserved Names",permalink:"/djseed/docs/reservedNames"},next:{title:"Broadcast Eval",permalink:"/djseed/docs/examples/broadcasteval"}},a={},c=[{value:"Project Directory",id:"project-directory",level:2},{value:"Package.json",id:"packagejson",level:2},{value:"ClusterUtil",id:"clusterutil",level:2},{value:"Client",id:"client",level:2},{value:"Wrapping Up",id:"wrapping-up",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this example we will go over how to prepare you bot for sharding."),(0,o.kt)("p",null,"These examples will be shown in JavaScript, however, the TypeScript\nsyntax will be essentially the same."),(0,o.kt)("h2",{id:"project-directory"},"Project Directory"),(0,o.kt)("p",null,"First lets review how our project directory should look.\nDue to how DJSeed works, ",(0,o.kt)("a",{parentName:"p",href:"/docs/classes/clusterutil"},"ClusterUtil"),"\nwill need to be in its own file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 cluster.js\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n")),(0,o.kt)("h2",{id:"packagejson"},"Package.json"),(0,o.kt)("p",null,"Your package should look something like below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "my-bot",\n  "version": "1.0.0",\n  "main": "src/index.js",\n\n  "dependencies": {\n    "discord.js": "^13.5.1",\n    "djseed": "^1.0.0"\n  }\n}\n')),(0,o.kt)("h2",{id:"clusterutil"},"ClusterUtil"),(0,o.kt)("p",null,"First we will need to create our ",(0,o.kt)("a",{parentName:"p",href:"/docs/classes/clusterutil"},"ClusterUtil"),".\nClusterUtil will act as our parent process managing all our bot clusters\nand ensuring they are all working as intended."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/index.js"',title:'"src/index.js"'},"// Import ClusterUtil.\nconst { ClusterUtil } = require('djseed');\n\n// Make New ClusterUtil Instance.\nconst util = new ClusterUtil('replace-with-bot-token', './cluster.js');\n\n// Register Events.\n// NOTE: We are registering a listener to every event here.\n// You are not required to do this. We utilize events instead of \n// Logging so you can handle telemetry however you like!\nutil.on('Cluster_Util_Info', (i) => console.log('[Cluster_Util_Info]:', i));\nutil.on('Cluster_Util_Error', (i) => console.log('[Cluster_Util_Error]:', i));\nutil.on('Cluster_Ready', (i) => console.log('[Cluster_Ready]:', i));\nutil.on('Cluster_Death', (i) => console.log('[Cluster_Death]:', i));\nutil.on('Cluster_Error', (i) => console.log('[Cluster_Error]:', i));\nutil.on('Cluster_Warn', (i) => console.log('[Cluster_Warn]:', i));\nutil.on('Shard_Ready', (i) => console.log('[Shard_Ready]:', i));\nutil.on('Shard_Resume', (i) => console.log('[Shard_Resume]:', i));\nutil.on('Shard_Reconnecting', (i) => console.log('[Shard_Reconnecting]:', i));\nutil.on('Shard_Disconnect', (i) => console.log('[Shard_Disconnect]:', i));\nutil.on('Shard_Error', (i) => console.log('[Shard_Error]:', i));\n\n\n// Start Util.\nutil.launch();\n\n")),(0,o.kt)("h2",{id:"client"},"Client"),(0,o.kt)("p",null,"Next we will need to construct our cluster compatible client.\nThis part is very similar to making a client in Discord.JS."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/cluster.js"',title:'"src/cluster.js"'},"// Import Client And Intents.\nconst { Client, GatewayIntentBits } = require('djseed');\n\n// Construct New Bot.\nconst bot = new Client('replace-with-bot-token', { intents: [GatewayIntentBits.Guilds] });\n\n// Create Ready Listener.\nbot.once('ready', () => {\n  console.log(`Logged in as ${bot.user.username}#${bot.user.discriminator}!`);\n  console.log(bot.cluster ? 'Clustered' : 'Not Clustered');\n});\n\n// Log Bot Into Gateway.\nbot.login();\n")),(0,o.kt)("h2",{id:"wrapping-up"},"Wrapping Up"),(0,o.kt)("p",null,"Thats quite simply it. The code example will request information from your bots gateway\nand open the needed amount of clusters/shards accordingly."))}d.isMDXComponent=!0}}]);