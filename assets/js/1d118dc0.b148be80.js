"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[753],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8469:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),o=["components"],l={title:"Cluster Stats"},i=void 0,c={unversionedId:"examples/clusterstats",id:"examples/clusterstats",title:"Cluster Stats",description:"In this example, we will be building off of what was done in the Sharding Example.",source:"@site/docs/examples/clusterstats.mdx",sourceDirName:"examples",slug:"/examples/clusterstats",permalink:"/djseed/docs/examples/clusterstats",tags:[],version:"current",frontMatter:{title:"Cluster Stats"},sidebar:"sidebar",previous:{title:"Broadcast Eval",permalink:"/djseed/docs/examples/broadcasteval"},next:{title:"Client",permalink:"/djseed/docs/classes/client"}},u=[{value:"Stats Command",id:"stats-command",children:[],level:2},{value:"Wrapping Up",id:"wrapping-up",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this example, we will be building off of what was done in the ",(0,s.kt)("a",{parentName:"p",href:"/docs/examples/sharding"},"Sharding Example"),"."),(0,s.kt)("h2",{id:"stats-command"},"Stats Command"),(0,s.kt)("p",null,"To keep it simple we are going to make a ",(0,s.kt)("em",{parentName:"p"},"chat")," command that responds with the bots stats."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/cluster.js"',title:'"src/cluster.js"'},"// Import Client And Intents.\nconst { Client, Intents } = require('djseed');\n\n// Construct New Bot.\nconst bot = new Client('replace-with-bot-token', {\n  intents: [\n    Intents.FLAGS.GUILDS,\n    Intents.FLAGS.GUILD_MESSAGES\n  ]\n});\n\n...\n\n// Add Listener For Message Create\nbot.on('messageCreate', async (msg) => {\n  // If Message Is !stats.\n  if (msg.content.toLowerCase() === '!stats') {\n    // Fetch Fresh Stats.\n    const stats = await bot.cluster.util.getStats();\n\n    // Map Clusters Into Embed Fields.\n    const mappedStats = stats.map((cluster) => {\n      let value = `\\`\\`\\``;\n      value += `Shards: ${cluster.shards.length}\\n`;\n      value += `Guilds: ${cluster.guilds}\\n`;\n      value += `Users: ${cluster.users}`;\n      value += `\\`\\`\\``;\n\n      return {\n        inline: true,\n        name: `Cluster ${cluster.id}`,\n        value: value\n      }\n    });\n\n    // Send Message.\n    msg.reply({ embeds: [{\n      title: \"Stats\",\n      fields: mappedStats\n    }] });\n  }\n});\n\n// Log Bot Into Gateway.\nbot.login();\n")),(0,s.kt)("h2",{id:"wrapping-up"},"Wrapping Up"),(0,s.kt)("p",null,"If you send ",(0,s.kt)("inlineCode",{parentName:"p"},"!stats")," in a channel the bot is in, it should respond\nwith a dynamic embed with imformation on your cluster(s)."))}d.isMDXComponent=!0}}]);